{"version":3,"sources":["features/pomodoro-clock/TimeSpanLengthControl.js","features/pomodoro-clock/pomodoroClockSlice.js","features/pomodoro-clock/TimeDisplay.js","features/pomodoro-clock/TimerControl.js","features/pomodoro-clock/PomodoroClock.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["TimeSpanLengthControl","props","id","Card","border","text","Header","caption","Body","Container","Row","Col","Button","variant","onClick","increment","color","icon","faPlus","value","decrement","faMinus","pomodoroClockSlice","createSlice","name","initialState","timerIsOn","beep","timerMode","breakLength","sessionLength","minutesLeft","secondsLeft","reducers","changeState","state","reset","incrementSessionLength","decrementSessionLength","incrementBreakLength","decrementBreakLength","beepOff","actions","selectBreakLength","pomodoroClock","toString","selectSessionLength","selectMinutes","selectSeconds","selectIsOn","selectTimerMode","selectBeepMode","timeToDisplay","time","length","TimeDisplay","seconds","useSelector","minutes","minutesToDisplay","secondsToDisplay","style","fontSize","TimerControl","dispatch","useDispatch","isTimerOn","intervalRef","useRef","start","useCallback","current","setInterval","stop","clearInterval","useTimer","faPlay","faPause","stopSound","faStop","PomodoroClock","document","getElementById","play","className","element","pause","currentTime","preload","src","App","configureStore","reducer","pomodoroClockReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed036909.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlus} from '@fortawesome/free-solid-svg-icons'\nimport {faMinus} from '@fortawesome/free-solid-svg-icons'\n\nimport Button from \"react-bootstrap/Button\";\n\nfunction TimeSpanLengthControl(props) {\n    return (\n        <div id={props.id + '-label'}>\n            <Card\n                border='info'\n                text='info'\n            >\n                <Card.Header>\n                    {props.caption}\n                </Card.Header>\n                <Card.Body>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Button\n                                    variant=\"outline-info\"\n                                    id={props.id + '-increment'}\n                                    onClick={props.increment}\n                                >\n                                    <FontAwesomeIcon\n                                        color=\"lightseagreen\"\n                                        icon={faPlus}\n                                    />\n                                </Button>\n                            </Col>\n                            <Col id={props.id + '-length'}>\n                                {props.value}\n                            </Col>\n                            <Col>\n                                <Button\n                                    variant=\"outline-info\"\n                                    id={props.id + '-decrement'}\n                                    onClick={props.decrement}\n                                >\n                                    <FontAwesomeIcon\n                                        color=\"lightseagreen\"\n                                        icon={faMinus}\n                                    />\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default TimeSpanLengthControl;","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nexport const pomodoroClockSlice = createSlice({\r\n    name: 'pomodoroClock',\r\n    initialState: {\r\n        timerIsOn: false,\r\n        beep: false,\r\n        timerMode: 'Session',\r\n        breakLength: 5,\r\n        sessionLength: 25,\r\n        minutesLeft: 25,\r\n        secondsLeft: 0\r\n\r\n    },\r\n    reducers: {\r\n        changeState: state => {\r\n            state.timerIsOn = !state.timerIsOn;\r\n        },\r\n        reset: state => {\r\n            state.timerIsOn = false;\r\n            state.beep = false;\r\n            state.timerMode = 'Session';\r\n            state.breakLength = 5;\r\n            state.sessionLength = 25;\r\n            state.minutesLeft = 25;\r\n            state.secondsLeft = 0;\r\n        },\r\n        decrement: state => {\r\n            if (state.secondsLeft > 0) {\r\n                state.secondsLeft -= 1;\r\n            } else if (state.minutesLeft > 0) {\r\n                state.minutesLeft -= 1;\r\n                state.secondsLeft = 59;\r\n            } else if (state.secondsLeft === 0\r\n                && state.minutesLeft === 0) {\r\n                state.beep = true;\r\n                if (state.timerMode === 'Session') {\r\n                    state.timerMode = 'Break';\r\n                    state.minutesLeft = state.breakLength;\r\n                    state.secondsLeft = 0;\r\n                } else {\r\n                    state.timerMode = 'Session';\r\n                    state.minutesLeft = state.sessionLength;\r\n                    state.secondsLeft = 0;\r\n                }\r\n            }\r\n        },\r\n        incrementSessionLength: state => {\r\n            if (state.sessionLength < 60) {\r\n                state.sessionLength += 1;\r\n                state.minutesLeft += 1;\r\n            }\r\n        },\r\n        decrementSessionLength: state => {\r\n            if (state.sessionLength > 1) {\r\n                state.sessionLength -= 1;\r\n                state.minutesLeft -= 1;\r\n            }\r\n        },\r\n        incrementBreakLength: state => {\r\n            if (state.breakLength < 60) {\r\n                state.breakLength += 1;\r\n            }\r\n        },\r\n        decrementBreakLength: state => {\r\n            if (state.breakLength > 1) {\r\n                state.breakLength -= 1;\r\n            }\r\n        },\r\n        beepOff: state => {\r\n            state.beep = false;\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    changeState,\r\n    decrement,\r\n    reset,\r\n    incrementBreakLength,\r\n    decrementBreakLength,\r\n    incrementSessionLength,\r\n    decrementSessionLength,\r\n    beepOff,\r\n} = pomodoroClockSlice.actions;\r\n\r\n\r\nexport const selectBreakLength = state => state.pomodoroClock.breakLength.toString();\r\nexport const selectSessionLength = state => state.pomodoroClock.sessionLength.toString();\r\nexport const selectMinutes = state => state.pomodoroClock.minutesLeft.toString();\r\nexport const selectSeconds = state => state.pomodoroClock.secondsLeft.toString();\r\nexport const selectIsOn = state => state.pomodoroClock.timerIsOn;\r\nexport const selectTimerMode = state => state.pomodoroClock.timerMode;\r\nexport const selectBeepMode = state => state.pomodoroClock.beep;\r\n\r\nexport default pomodoroClockSlice.reducer;\r\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport {useSelector} from \"react-redux\";\nimport {\n    selectMinutes,\n    selectSeconds,\n    selectTimerMode\n} from \"./pomodoroClockSlice\";\n\nfunction timeToDisplay(time) {\n    if(time.length === 1) {\n        return '0' + time;\n    }\n    return time;\n}\n\nfunction TimeDisplay(props) {\n    const seconds = useSelector(selectSeconds);\n    const minutes = useSelector(selectMinutes);\n    const timerMode = useSelector(selectTimerMode);\n\n    let minutesToDisplay = timeToDisplay(minutes);\n    let secondsToDisplay = timeToDisplay(seconds);\n\n    return (\n        <div>\n            <Card\n                text='info'\n                border='info'>\n                <Card.Header id='timer-label'>\n                    {timerMode}\n                </Card.Header>\n                <Card.Body\n                    id='time-left'\n                    style={{fontSize: '300%'}}\n                >\n                    {minutesToDisplay}:{secondsToDisplay}\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default TimeDisplay;","import React, {useCallback, useRef} from \"react\";\nimport {Button, Card, Col, Container, Row} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlay} from '@fortawesome/free-solid-svg-icons'\nimport {faPause} from '@fortawesome/free-solid-svg-icons'\nimport {faStop} from '@fortawesome/free-solid-svg-icons'\nimport {useSelector} from \"react-redux\";\nimport {selectIsOn} from './pomodoroClockSlice';\nimport {useDispatch} from \"react-redux\";\nimport {changeState, decrement, reset} from './pomodoroClockSlice';\n\nfunction useTimer() {\n    const intervalRef = useRef(null);\n    const dispatch = useDispatch();\n    const start = useCallback(() => {\n        if (intervalRef.current !== null) {\n            return;\n        }\n        intervalRef.current = setInterval(() => {\n            dispatch(decrement());\n        }, 1000);\n    }, []);\n\n    const stop = useCallback(() => {\n        if (intervalRef.current === null) {\n            return;\n        }\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n    }, []);\n\n    return {start, stop};\n}\n\nfunction TimerControl(props) {\n    const dispatch = useDispatch();\n    const isTimerOn = useSelector(selectIsOn);\n    const {start, stop} = useTimer();\n    return (\n        <div>\n            <Card text='info' border='info'>\n                <Card.Body>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <Button\n                                    variant=\"outline-info\"\n                                    id='start_stop'\n                                    onClick={() => {\n                                        if (!isTimerOn) {\n                                            dispatch(changeState());\n                                            start();\n                                        } else {\n                                            dispatch(changeState());\n                                            stop();\n                                        }\n                                    }}\n                                >\n                                    <FontAwesomeIcon icon={faPlay}/>\n                                    <FontAwesomeIcon icon={faPause}/>\n                                </Button>\n\n                            </Col>\n                            <Col>\n                                <Button\n                                    variant=\"outline-info\"\n                                    id='reset'\n                                    onClick={() => {\n                                        stop();\n                                        props.stopSound();\n                                        dispatch(reset());\n                                    }}\n                                >\n                                    <FontAwesomeIcon icon={faStop}/>\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport default TimerControl;","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport TimeSpanLengthControl from \"./TimeSpanLengthControl\";\nimport './PomodoroClock.css'\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectBreakLength,\n    selectSessionLength,\n    incrementSessionLength,\n    decrementSessionLength,\n    incrementBreakLength,\n    decrementBreakLength,\n    selectBeepMode,\n    beepOff\n} from \"./pomodoroClockSlice\";\nimport TimeDisplay from \"./TimeDisplay\";\nimport TimerControl from \"./TimerControl\";\n\nfunction playSound() {\n    let element = document.getElementById('beep');\n    element.play();\n}\n\nfunction stopSound() {\n    let element = document.getElementById('beep');\n    element.pause();\n    element.currentTime = 0;\n}\n\nfunction PomodoroClock() {\n    const breakLength = useSelector(selectBreakLength);\n    const sessionLength = useSelector(selectSessionLength);\n    const dispatch = useDispatch();\n    const beep = useSelector(selectBeepMode);\n    if(beep) {\n        playSound();\n        dispatch(beepOff());\n    }\n    return (\n        <div>\n            <Container className=\"main\">\n                <Row>\n                    <Col>\n                        <TimeSpanLengthControl\n                            caption=\"Break length\"\n                            id='break'\n                            value={breakLength}\n                            increment={() => dispatch(incrementBreakLength())}\n                            decrement={() => dispatch(decrementBreakLength())}\n                        />\n                    </Col>\n                    <Col>\n                        <TimeSpanLengthControl\n                            caption=\"Session length\"\n                            id='session'\n                            value={sessionLength}\n                            increment={() => dispatch(incrementSessionLength())}\n                            decrement={() => dispatch(decrementSessionLength())}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <TimeDisplay/>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <TimerControl stopSound={() => stopSound()}/>\n                    </Col>\n                </Row>\n            </Container>\n            <audio id=\"beep\" preload=\"auto\"\n                   src=\"https://goo.gl/65cBl1\"/>\n        </div>\n    );\n}\n\nexport default PomodoroClock;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport ReactFCCtest from 'react-fcctest';\r\nimport PomodoroClock from \"./features/pomodoro-clock/PomodoroClock\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <ReactFCCtest />\r\n        <PomodoroClock />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport pomodoroClockReducer from '../features/pomodoro-clock/pomodoroClockSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    pomodoroClock: pomodoroClockReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}